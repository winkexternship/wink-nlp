const HeaderSize=48,HeaderBufferSize=192;var fs=require("fs"),readModel=function(file){var fd,packing,lexicon,featuresData,xpansions,tcat,pos,trex,preserve,header=new Uint32Array(48),model=Object.create(null),readBlock=function(target,targetSize,targetName,parse){var size=-1,parsed=null;try{size=fs.readSync(fd,target,0,targetSize)}catch(ex){throw Error("Read Model: incorrect input – read failure at: "+targetName+"\n\t"+ex.message)}if(size!==targetSize)throw Error("Read Model: incorrect input length found for: "+targetName);if(parse)try{parsed=JSON.parse(target.toString("utf8"))}catch(ex){throw Error("Read Model: incorrect format – parse failure at: "+targetName+"\n\t"+ex.message)}return parsed||target};try{fd=fs.openSync(file,"r")}catch(ex){throw Error("Read Model: file open failure\n\t"+ex.message)}header=readBlock(header,192,"header",!1),packing=readBlock(Buffer.alloc(header[2]),header[2],"packing",!0),lexicon=readBlock(lexicon=new Uint32Array(header[3]/4),header[3],"lexicon",!1),featuresData=readBlock(Buffer.alloc(header[4]),header[4],"features",!0);for(const f in packing.layout)if(0===packing.layout[f][3]){featuresData[f].hash=Object.create(null);for(let k=0;k<featuresData[f].list.length;k+=1)featuresData[f].hash[featuresData[f].list[k]]=k}featuresData.lexeme.hash=Object.create(null);for(let k=0;k<featuresData.lexeme.list.length;k+=1)featuresData.lexeme.hash[featuresData.lexeme.list[k]]=k;tcat=readBlock(Buffer.alloc(header[5]),header[5],"tcat",!0),pos=readBlock(Buffer.alloc(header[6]),header[6],"pos",!0),trex=readBlock(Buffer.alloc(header[7]),header[7],"trex",!0),xpansions=readBlock(xpansions=new Uint32Array(header[8]/4),header[8],"xpansions",!1),preserve=readBlock(Buffer.alloc(header[9]),header[9],"preserve",!0);const clusters=featuresData.posClusters.list;for(let k=0;k<clusters.length;k+=1)clusters[k]=new Set(clusters[k].split("_").map((e=>pos.hash[e]||0)));return model.packing=packing,model.lexicon=lexicon,model.features=featuresData,model.tcat=tcat,model.pos=pos,model.trex=trex,model.xpansions=xpansions,model.preserve=preserve,model};module.exports=readModel;